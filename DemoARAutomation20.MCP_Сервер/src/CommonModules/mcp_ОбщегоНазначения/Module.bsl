// Репозиторий проекта: 
// https://github.com/vladimir-kharin/1c_mcp
// 
// Харин Владимир (С) 2025. https://vharin.ru
// Telegram - https://t.me/vladimir_kharin

#Область ПрограммныйИнтерфейс

// Преобразует строку в формате JSON в структуру.
// 
// Параметры:
//  СтрокаJSON - Строка - строка в формате JSON.
// 
// Возвращаемое значение:
//  Структура -
Функция JSONВСтруктуру(СтрокаJSON) Экспорт
	// Выделяем в строке JSON часть именно JSON
	// Находим позицию первого открывающего фигурного скобки
	ПозицияНачала = СтрНайти(СтрокаJSON, "{");
	Если ПозицияНачала = 0 Тогда
		// Если не найдено, возвращаем Неопределено или можно вызвать ошибку
		Возврат Неопределено;
	КонецЕсли;

	// Находим позицию последнего закрывающего фигурного скобки, используя поиск с конца
	ПозицияКонца = СтрНайти(СтрокаJSON, "}", НаправлениеПоиска.СКонца);
	Если ПозицияКонца = 0 Тогда
		// Если закрывающая скобка не найдена, возвращаем Неопределено
		Возврат Неопределено;
	КонецЕсли;

	// Вычисляем длину фрагмента с JSON: от первого "{" до последнего "}" включительно
	ДлинаФрагмента = ПозицияКонца - ПозицияНачала + 1;

	// Извлекаем корректную часть JSON из строки
	ЧистыйJSON = Сред(СтрокаJSON, ПозицияНачала, ДлинаФрагмента);

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЧистыйJSON);

	Попытка
		// Пытаемся прочитать JSON в структуру
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		Возврат Результат;
	Исключение
		// Если не удалось, то читаем в соответствие
		ЧтениеJSON.Закрыть();

		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ЧистыйJSON);

		Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		// Преобразуем соответствие в структуру с нормализацией ключей
		Возврат СоответствиеВСтруктуруСНормализациейКлючей(Соответствие);
	КонецПопытки;
КонецФункции

// Разбирает URL на составляющие: схема, хост, порт и путь
// 
// Параметры:
//  URL - Строка - URL для разбора
// 
// Возвращаемое значение:
//  Структура - Разобранные части URL (схема, хост, порт, путь)
Функция РазобратьURL(Знач URL) Экспорт
	РезультатРазбора = Новый Структура("Схема, Хост, Порт, Путь");
	    
	    // Проверка и удаление протокола
	    Если НРег(Лев(URL, 8)) = "https://" Тогда
	        РезультатРазбора.Схема = "https";
	        URL = Сред(URL, 9);
	    ИначеЕсли НРег(Лев(URL, 7)) = "http://" Тогда
	        РезультатРазбора.Схема = "http";
	        URL = Сред(URL, 8);
	    Иначе
	        ВызватьИсключение "Неверный формат URL: отсутствует протокол http или https";
	    КонецЕсли;
	    
	    // Разделение хоста, порта и пути
	    ПозицияСлеш = СтрНайти(URL, "/");
	    Если ПозицияСлеш > 0 Тогда
	        ХостИПорт = Лев(URL, ПозицияСлеш - 1);
	        РезультатРазбора.Путь = Сред(URL, ПозицияСлеш);
	    Иначе
	        ХостИПорт = URL;
	        РезультатРазбора.Путь = "/";
	    КонецЕсли;
	    
	    // Разделение хоста и порта
	    ПозицияДвоеточие = СтрНайти(ХостИПорт, ":");
	    Если ПозицияДвоеточие > 0 Тогда
	        РезультатРазбора.Хост = Лев(ХостИПорт, ПозицияДвоеточие - 1);
	        РезультатРазбора.Порт = Число(Сред(ХостИПорт, ПозицияДвоеточие + 1));
	    Иначе
	        РезультатРазбора.Хост = ХостИПорт;
	        РезультатРазбора.Порт = ?(РезультатРазбора.Схема = "https", 443, 80);
	    КонецЕсли;
	    
	    Возврат РезультатРазбора;
КонецФункции

// Преобразует структура в строку JSON
// 
// Параметры:
//  Объект - Структура - которую необходимо преобразовать в строку JSON.
// 
// Возвращаемое значение:
//  Строка - в формате JSON.
Функция СтруктураВJSON(Объект) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, является ли символ буквой.
//
// Параметры:
//  Символ - Строка - символ для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если символ является буквой.
Функция ЭтоБуква(Символ)

	КодСимвола = КодСимвола(Символ);

	// Латинские буквы A-Z (65-90) и a-z (97-122)
	Если (КодСимвола >= 65 И КодСимвола <= 90)
		Или (КодСимвола >= 97 И КодСимвола <= 122) Тогда
		Возврат Истина;
	КонецЕсли;

	// Кириллические буквы А-Я (1040-1103), включая Ё (1025, 1105)
	Если (КодСимвола >= 1040 И КодСимвола <= 1103)
		Или КодСимвола = 1025
		Или КодСимвола = 1105 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Проверяет, является ли символ цифрой.
//
// Параметры:
//  Символ - Строка - символ для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если символ является цифрой.
Функция ЭтоЦифра(Символ)

	КодСимвола = КодСимвола(Символ);

	// Цифры 0-9 (48-57)
	Возврат КодСимвола >= 48 И КодСимвола <= 57;

КонецФункции

// Нормализует ключ для использования в структуре.
// Заменяет недопустимые символы на "_" и обеспечивает,
// что первый символ - буква или "_".
//
// Параметры:
//  Ключ - Строка - исходный ключ.
//
// Возвращаемое значение:
//  Строка - нормализованный ключ.
Функция НормализоватьКлюч(Ключ)

	Если НЕ ЗначениеЗаполнено(Ключ) Тогда
		Возврат "_";
	КонецЕсли;

	НормализованныйКлюч = "";

	Для Индекс = 1 По СтрДлина(Ключ) Цикл
		Символ = Сред(Ключ, Индекс, 1);

		Если Индекс = 1 Тогда
			// Первый символ должен быть буквой или "_"
			Если ЭтоБуква(Символ) Или Символ = "_" Тогда
				НормализованныйКлюч = НормализованныйКлюч + Символ;
			Иначе
				НормализованныйКлюч = НормализованныйКлюч + "_";
			КонецЕсли;
		Иначе
			// Последующие символы могут быть буквами, цифрами или "_"
			Если ЭтоБуква(Символ) Или ЭтоЦифра(Символ) Или Символ = "_" Тогда
				НормализованныйКлюч = НормализованныйКлюч + Символ;
			Иначе
				НормализованныйКлюч = НормализованныйКлюч + "_";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат НормализованныйКлюч;

КонецФункции

// Преобразует соответствие в структуру с нормализацией ключей.
// Рекурсивно обрабатывает вложенные объекты.
//
// Параметры:
//  Значение - Произвольный - значение для преобразования.
//
// Возвращаемое значение:
//  Произвольный - преобразованное значение.
Функция СоответствиеВСтруктуруСНормализациейКлючей(Значение)

	Если ТипЗнч(Значение) = Тип("Соответствие") Тогда

		Структура = Новый Структура;

		Для Каждого КлючЗначение Из Значение Цикл

			НормализованныйКлюч = НормализоватьКлюч(Строка(КлючЗначение.Ключ));

			// Рекурсивно обрабатываем значение
			ОбработанноеЗначение = СоответствиеВСтруктуруСНормализациейКлючей(КлючЗначение.Значение);

			Структура.Вставить(НормализованныйКлюч, ОбработанноеЗначение);

		КонецЦикла;

		Возврат Структура;

	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда

		Массив = Новый Массив;

		Для Каждого Элемент Из Значение Цикл
			// Рекурсивно обрабатываем элементы массива
			Массив.Добавить(СоответствиеВСтруктуруСНормализациейКлючей(Элемент));
		КонецЦикла;

		Возврат Массив;

	Иначе

		// Простое значение - возвращаем как есть
		Возврат Значение;

	КонецЕсли;

КонецФункции

#КонецОбласти

