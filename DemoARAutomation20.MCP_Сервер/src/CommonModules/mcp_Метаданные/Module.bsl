#Область ПрограммныйИнтерфейс

#Область СозданиеТаблицОписанияОбъектов

// Создает пустую таблицу для описания инструментов
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * ИмяОбработкиКонтейнера - Строка
//   * Имя - Строка
//   * Описание - Строка
//   * СхемаПараметров - Строка
//
Функция ТаблицаИнструментов() Экспорт
	
	ТаблицаИнструментов = Новый ТаблицаЗначений;
	ТаблицаИнструментов.Колонки.Добавить("ИмяОбработкиКонтейнера", Новый ОписаниеТипов("Строка"));
	ТаблицаИнструментов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаИнструментов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаИнструментов.Колонки.Добавить("СхемаПараметров", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаИнструментов;
	
КонецФункции

// Создает пустую таблицу для описания ресурсов
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * ИмяОбработкиКонтейнера - Строка
//   * Адрес - Строка
//   * Имя - Строка
//   * Описание - Строка
//
Функция ТаблицаРесурсов() Экспорт
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	ТаблицаРесурсов.Колонки.Добавить("ИмяОбработкиКонтейнера", Новый ОписаниеТипов("Строка"));
	ТаблицаРесурсов.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ТаблицаРесурсов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаРесурсов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

// Создает пустую таблицу для описания промптов
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//   * ИмяОбработкиКонтейнера - Строка
//   * Имя - Строка
//   * Описание - Строка
//   * Параметры - Строка
//
Функция ТаблицаПромптов() Экспорт
	
	ТаблицаПромптов = Новый ТаблицаЗначений;
	ТаблицаПромптов.Колонки.Добавить("ИмяОбработкиКонтейнера", Новый ОписаниеТипов("Строка"));
	ТаблицаПромптов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПромптов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаПромптов.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаПромптов;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеСтрок

// Добавляет строку в таблицу инструментов
//
// Параметры:
//  ТаблицаИнструментов - ТаблицаЗначений - таблица инструментов
//  Имя - Строка - имя инструмента
//  Описание - Строка - описание инструмента
//  СхемаПараметров - Строка - JSON-схема параметров
//
Процедура ДобавитьИнструмент(ТаблицаИнструментов, Имя, Описание, СхемаПараметров) Экспорт
	
	НоваяСтрока = ТаблицаИнструментов.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.СхемаПараметров = СхемаПараметров;
	
КонецПроцедуры

// Добавляет строку в таблицу ресурсов
//
// Параметры:
//  ТаблицаРесурсов - ТаблицаЗначений - таблица ресурсов
//  Адрес - Строка - адрес ресурса
//  Имя - Строка - имя ресурса
//  Описание - Строка - описание ресурса
//
Процедура ДобавитьРесурс(ТаблицаРесурсов, Адрес, Имя, Описание) Экспорт
	
	НоваяСтрока = ТаблицаРесурсов.Добавить();
	НоваяСтрока.Адрес = Адрес;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Описание = Описание;
	
КонецПроцедуры

// Добавляет строку в таблицу промптов
//
// Параметры:
//  ТаблицаПромптов - ТаблицаЗначений - таблица промптов
//  Имя - Строка - имя промпта
//  Описание - Строка - описание промпта
//  Параметры - Строка - JSON-описание параметров
//
Процедура ДобавитьПромпт(ТаблицаПромптов, Имя, Описание, Параметры) Экспорт
	
	НоваяСтрока = ТаблицаПромптов.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.Параметры = Параметры;
	
КонецПроцедуры

// Заполняет таблицу инструментов из обработок-контейнеров
//
// Параметры:
//  ТаблицаИнструментов - ТаблицаЗначений - таблица инструментов для заполнения
//
Процедура ЗаполнитьТаблицуИнструментов(ТаблицаИнструментов) Экспорт
	
	СоставПодсистемыКонтейнеры = Метаданные.Подсистемы.mcp_MCPСервер.Подсистемы.mcp_КонтейнерыИнструментов.Состав;
	
	Для Каждого МД Из СоставПодсистемыКонтейнеры Цикл
		
		Если НЕ Метаданные.Обработки.Содержит(МД) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбработки = Обработки[МД.Имя];
		
		// Создаем отдельную таблицу для текущей обработки
		ТекущаяТаблицаИнструментов = ТаблицаИнструментов.СкопироватьКолонки();
		
		// Вызываем метод добавления инструментов в обработке
		МенеджерОбработки.ДобавитьИнструменты(ТекущаяТаблицаИнструментов);
		
		// Заполняем имя обработки-контейнера и переносим в общую таблицу
		Для Каждого Строка Из ТекущаяТаблицаИнструментов Цикл
			СтрокаОбщейТаблицы = ТаблицаИнструментов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОбщейТаблицы, Строка);
			СтрокаОбщейТаблицы.ИмяОбработкиКонтейнера = МД.Имя;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу ресурсов из обработок-контейнеров
//
// Параметры:
//  ТаблицаРесурсов - ТаблицаЗначений - таблица ресурсов для заполнения
//
Процедура ЗаполнитьТаблицуРесурсов(ТаблицаРесурсов) Экспорт
	
	СоставПодсистемыКонтейнеры = Метаданные.Подсистемы.mcp_MCPСервер.Подсистемы.mcp_КонтейнерыРесурсов.Состав;
	
	Для Каждого МД Из СоставПодсистемыКонтейнеры Цикл
		
		Если НЕ Метаданные.Обработки.Содержит(МД) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбработки = Обработки[МД.Имя];
		
		// Проверяем наличие метода ДобавитьРесурсы
		Попытка
			// Создаем отдельную таблицу для текущей обработки
			ТекущаяТаблицаРесурсов = ТаблицаРесурсов.СкопироватьКолонки();
			
			// Вызываем метод добавления ресурсов в обработке
			МенеджерОбработки.ДобавитьРесурсы(ТекущаяТаблицаРесурсов);
			
			// Заполняем имя обработки-контейнера и переносим в общую таблицу
			Для Каждого Строка Из ТекущаяТаблицаРесурсов Цикл
				СтрокаОбщейТаблицы = ТаблицаРесурсов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщейТаблицы, Строка);
				СтрокаОбщейТаблицы.ИмяОбработкиКонтейнера = МД.Имя;
			КонецЦикла;
		Исключение
			// Метод ДобавитьРесурсы не реализован в обработке - пропускаем
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу промптов из обработок-контейнеров
//
// Параметры:
//  ТаблицаПромптов - ТаблицаЗначений - таблица промптов для заполнения
//
Процедура ЗаполнитьТаблицуПромптов(ТаблицаПромптов) Экспорт
	
	СоставПодсистемыКонтейнеры = Метаданные.Подсистемы.mcp_MCPСервер.Подсистемы.mcp_КонтейнерыПромптов.Состав;
	
	Для Каждого МД Из СоставПодсистемыКонтейнеры Цикл
		
		Если НЕ Метаданные.Обработки.Содержит(МД) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерОбработки = Обработки[МД.Имя];
		
		// Проверяем наличие метода ДобавитьПромпты
		Попытка
			// Создаем отдельную таблицу для текущей обработки
			ТекущаяТаблицаПромптов = ТаблицаПромптов.СкопироватьКолонки();
			
			// Вызываем метод добавления промптов в обработке
			МенеджерОбработки.ДобавитьПромпты(ТекущаяТаблицаПромптов);
			
			// Заполняем имя обработки-контейнера и переносим в общую таблицу
			Для Каждого Строка Из ТекущаяТаблицаПромптов Цикл
				СтрокаОбщейТаблицы = ТаблицаПромптов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбщейТаблицы, Строка);
				СтрокаОбщейТаблицы.ИмяОбработкиКонтейнера = МД.Имя;
			КонецЦикла;
		Исключение
			// Метод ДобавитьПромпты не реализован в обработке - пропускаем
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаПараметровИнструментов

// Создает описание простого параметра для схемы инструмента
//
// Параметры:
//  Имя - Строка - имя параметра
//  Тип - Строка - тип параметра (string, number, boolean, etc.)
//  Описание - Строка - описание параметра
//  ЗначениеПоУмолчанию - Произвольный - значение по умолчанию (Неопределено, если нет)
//  Обязательный - Булево - признак обязательности параметра
//  СписокДопустимыхЗначений - Строка - список допустимых значений через запятую (пустая строка, если нет ограничений)
//
// Возвращаемое значение:
//  Структура - описание простого параметра
//
Функция ПараметрИнструмента(Имя, Тип = Неопределено, Описание = Неопределено, ЗначениеПоУмолчанию = Неопределено, Обязательный = Ложь, СписокДопустимыхЗначений = "") Экспорт
	
	ОписаниеПараметра = Новый Структура;
	ОписаниеПараметра.Вставить("ТипЭлемента", "ПростойПараметр");
	ОписаниеПараметра.Вставить("Имя", Имя);
	ОписаниеПараметра.Вставить("Описание", Описание);
	ОписаниеПараметра.Вставить("Тип", Тип);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Обязательный", Обязательный);
	ОписаниеПараметра.Вставить("СписокДопустимыхЗначений", СписокДопустимыхЗначений);
	
	Возврат ОписаниеПараметра;
	
КонецФункции

// Создает описание параметра-массива для схемы инструмента
//
// Параметры:
//  Имя - Строка - имя параметра
//  ТипЭлементаМассива - Строка - тип элементов массива
//  Описание - Строка - описание параметра
//  Обязательный - Булево - признак обязательности параметра
//  СписокДопустимыхЗначенийЭлемента - Строка - список допустимых значений для элементов через запятую
//
// Возвращаемое значение:
//  Структура - описание параметра-массива
//
Функция ПараметрИнструментаМассив(Имя, ТипЭлементаМассива = Неопределено, Описание = Неопределено, Обязательный = Ложь, СписокДопустимыхЗначенийЭлемента = "") Экспорт
	
	ОписаниеПараметра = Новый Структура;
	ОписаниеПараметра.Вставить("ТипЭлемента", "Массив");
	ОписаниеПараметра.Вставить("Имя", Имя);
	ОписаниеПараметра.Вставить("Описание", Описание);
	ОписаниеПараметра.Вставить("ТипЭлементаМассива", ТипЭлементаМассива);
	ОписаниеПараметра.Вставить("Обязательный", Обязательный);
	ОписаниеПараметра.Вставить("СписокДопустимыхЗначенийЭлемента", СписокДопустимыхЗначенийЭлемента);
	
	Возврат ОписаниеПараметра;
	
КонецФункции

// Создает JSON-схему параметров инструмента из массива описаний параметров
//
// Параметры:
//  МассивОписанийПараметров - Массив из Структура - массив описаний параметров
//
// Возвращаемое значение:
//  Строка - JSON-схема параметров
//
Функция СхемаПараметровИнструмента(МассивОписанийПараметров) Экспорт
	
	Схема = Новый Структура;
	Схема.Вставить("type", "object");
	
	Свойства = Новый Структура;
	ОбязательныеПараметры = Новый Массив;
	
	Для Каждого ОписаниеПараметра Из МассивОписанийПараметров Цикл
		
		ИмяПараметра = ОписаниеПараметра.Имя;
		СвойствоПараметра = Новый Структура;
		
		Если ОписаниеПараметра.ТипЭлемента = "ПростойПараметр" Тогда
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.Тип) Тогда
				СвойствоПараметра.Вставить("type", ОписаниеПараметра.Тип);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.Описание) Тогда
				СвойствоПараметра.Вставить("description", ОписаниеПараметра.Описание);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.ЗначениеПоУмолчанию) Тогда
				СвойствоПараметра.Вставить("default", ОписаниеПараметра.ЗначениеПоУмолчанию);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.СписокДопустимыхЗначений) Тогда
				МассивЗначений = МассивДопустимыхЗначений(ОписаниеПараметра.СписокДопустимыхЗначений);
				СвойствоПараметра.Вставить("enum", МассивЗначений);
			КонецЕсли;
			
		ИначеЕсли ОписаниеПараметра.ТипЭлемента = "Массив" Тогда
			
			СвойствоПараметра.Вставить("type", "array");
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.Описание) Тогда
				СвойствоПараметра.Вставить("description", ОписаниеПараметра.Описание);
			КонецЕсли;
			
			ЭлементМассива = Новый Структура;
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.ТипЭлементаМассива) Тогда
				ЭлементМассива.Вставить("type", ОписаниеПараметра.ТипЭлементаМассива);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеПараметра.СписокДопустимыхЗначенийЭлемента) Тогда
				МассивЗначений = МассивДопустимыхЗначений(ОписаниеПараметра.СписокДопустимыхЗначенийЭлемента);
				ЭлементМассива.Вставить("enum", МассивЗначений);
			КонецЕсли;
			
			СвойствоПараметра.Вставить("items", ЭлементМассива);
			
		КонецЕсли;
		
		Свойства.Вставить(ИмяПараметра, СвойствоПараметра);
		
		Если ОписаниеПараметра.Обязательный Тогда
			ОбязательныеПараметры.Добавить(ИмяПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	Схема.Вставить("properties", Свойства);
	
	Если ОбязательныеПараметры.Количество() > 0 Тогда
		Схема.Вставить("required", ОбязательныеПараметры);
	КонецЕсли;
	
	Возврат mcp_ОбщегоНазначения.СтруктураВJSON(Схема);
	
КонецФункции

#КонецОбласти

#Область ПараметрыПромптов

// Создает описание параметра промпта
//
// Параметры:
//  Имя - Строка - имя параметра
//  Описание - Строка - описание параметра
//  Обязательный - Булево - признак обязательности параметра
//
// Возвращаемое значение:
//  Структура - описание параметра промпта
//
Функция ПараметрПромпта(Имя, Описание = Неопределено, Обязательный = Ложь) Экспорт
	
	ОписаниеПараметра = Новый Структура;
	ОписаниеПараметра.Вставить("Имя", Имя);
	ОписаниеПараметра.Вставить("Описание", Описание);
	ОписаниеПараметра.Вставить("Обязательный", Обязательный);
	
	Возврат ОписаниеПараметра;
	
КонецФункции

// Создает JSON-описание параметров промпта из массива описаний параметров
//
// Параметры:
//  МассивОписанийПараметров - Массив из Структура - массив описаний параметров промпта
//
// Возвращаемое значение:
//  Строка - JSON-описание параметров промпта
//
Функция ПараметрыПромпта(МассивОписанийПараметров) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Для Каждого ОписаниеПараметра Из МассивОписанийПараметров Цикл
		
		ПараметрПромпта = Новый Структура;
		ПараметрПромпта.Вставить("name", ОписаниеПараметра.Имя);
		
		Если ЗначениеЗаполнено(ОписаниеПараметра.Описание) Тогда
			ПараметрПромпта.Вставить("description", ОписаниеПараметра.Описание);
		КонецЕсли;
		
		ПараметрПромпта.Вставить("required", ОписаниеПараметра.Обязательный);
		
		МассивПараметров.Добавить(ПараметрПромпта);
		
	КонецЦикла;
	
	Возврат mcp_ОбщегоНазначения.СтруктураВJSON(МассивПараметров);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует строку со списком допустимых значений в массив
//
// Параметры:
//  СписокДопустимыхЗначений - Строка - список значений через запятую
//
// Возвращаемое значение:
//  Массив - массив обработанных значений
//
Функция МассивДопустимыхЗначений(СписокДопустимыхЗначений)
	
	МассивИсходныхЗначений = СтрРазделить(СписокДопустимыхЗначений, ",", Ложь);
	МассивЗначений = Новый Массив;
	Для Каждого Значение Из МассивИсходныхЗначений Цикл
		МассивЗначений.Добавить(СокрЛП(Значение));
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

#КонецОбласти
