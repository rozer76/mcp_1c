Процедура ДобавитьИнструменты(Инструменты) Экспорт

	ДобавитьИнструментСписокМетаданных(Инструменты);
	ДобавитьИнструментСтруктураОбъекта(Инструменты);

КонецПроцедуры

Функция ВыполнитьИнструмент(ИмяИнструмента, Аргументы) Экспорт

    Если ИмяИнструмента = "list_metadata_objects" Тогда
        Возврат СписокМетаданных(Аргументы);
    ИначеЕсли ИмяИнструмента = "get_metadata_structure" Тогда
        Возврат СтруктураОбъектаМетаданных(Аргументы);
    Иначе
        ВызватьИсключение "Неизвестный инструмент: " + ИмяИнструмента;
    КонецЕсли;

КонецФункции

#Область ИнструментСписокМетаданных

Процедура ДобавитьИнструментСписокМетаданных(Инструменты)

	// Создаем описания параметров для инструмента list_metadata_objects
	МассивПараметров = Новый Массив;
	
	// Параметр metaType - тип объекта метаданных
	СписокТиповМетаданных = "Catalogs,Documents,InformationRegisters,AccumulationRegisters,AccountingRegisters,CalculationRegisters,ChartsOfCharacteristicTypes,ChartsOfAccounts,ChartsOfCalculationTypes,BusinessProcesses,Tasks,ExchangePlans,FilterCriteria,Reports,DataProcessors,Enums,CommonModules,SessionParameters,CommonTemplates,CommonPictures,XDTOPackages,WebServices,HTTPServices,WSReferences,Styles,Languages,FunctionalOptions,FunctionalOptionsParameters,DefinedTypes,CommonAttributes,CommonCommands,CommandGroups,Constants,CommonForms,Roles,Subsystems,EventSubscriptions,ScheduledJobs,SettingsStorages,Sequences,DocumentJournals,ExternalDataSources,Interfaces,CommonModules";
	
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"metaType",
		"string",
		"Тип объекта метаданных",
		,
		Истина,
		СписокТиповМетаданных
	));
	
	// Параметр nameMask - маска имени в формате регулярного выражения
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"nameMask",
		"string",
		"Маска имени объекта. Проверяется на вхождение подстроки в имя или синоним объекта."
	));
	
	// Параметр maxItems - максимальное количество возвращаемых результатов
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"maxItems",
		"number",
		"Максимальное количество возвращаемых результатов",
		100
	));
	
	// Создаем JSON-схему параметров
	СхемаПараметров = mcp_Метаданные.СхемаПараметровИнструмента(МассивПараметров);
	
	// Добавляем инструмент в таблицу
	mcp_Метаданные.ДобавитьИнструмент(
		Инструменты,
		"list_metadata_objects",
		"Получение списка объектов метаданных конфигурации с возможностью фильтрации по типу и имени",
		СхемаПараметров
	);

КонецПроцедуры

Функция СписокМетаданных(Аргументы)

	// Значения по умолчанию
	МетаТип     = Аргументы.metaType;
	МаскаИмени  = ?(Аргументы.Свойство("nameMask"), Аргументы.nameMask, "");
	Лимит       = ?(Аргументы.Свойство("maxItems"), Аргументы.maxItems, 100);

	МаскаИмениВРег = ВРег(МаскаИмени);

	// Получаем коллекцию нужного типа
	Попытка
		КоллекцияМД = Метаданные[МетаТип];
	Исключение
		ВызватьИсключение "Неизвестный тип метаданных в metaType: " + МетаТип;
	КонецПопытки;

	МассивСтрок = Новый Массив;
	Счетчик = 0;

	Для Каждого Элемент Из КоллекцияМД Цикл
		// Проверяем маску имени, если она задана
		Если ЗначениеЗаполнено(МаскаИмени) Тогда
			// Простая проверка на вхождение подстроки
			Если СтрНайти(ВРег(Элемент.Имя), МаскаИмениВРег) = 0 
				И СтрНайти(ВРег(Элемент.Синоним), МаскаИмениВРег) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Формируем строку в формате "ПолноеИмя (Синоним)"
		СтрокаРезультата = Элемент.ПолноеИмя() + " (" + Элемент.Синоним + ")";
		МассивСтрок.Добавить(СтрокаРезультата);
		
		Счетчик = Счетчик + 1;
		Если Счетчик >= Лимит Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Объединяем строки через символ перевода строки
	Результат = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнструментСтруктураОбъекта

Процедура ДобавитьИнструментСтруктураОбъекта(Инструменты)

	// Создаем описания параметров для инструмента get_metadata_structure
	МассивПараметров = Новый Массив;
	
	// Параметр metaType - тип объекта метаданных (только те, у которых есть структура)
	СписокТиповМетаданных = "Catalogs,Documents,InformationRegisters,AccumulationRegisters,AccountingRegisters,CalculationRegisters,Reports,DataProcessors,ChartsOfCharacteristicTypes,ChartsOfAccounts,ChartsOfCalculationTypes,BusinessProcesses,Tasks,ExchangePlans";
	
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"metaType",
		"string",
		"Тип объекта метаданных",
		,
		Истина,
		СписокТиповМетаданных
	));
	
	// Параметр name - точное имя объекта (не зависимое от регистра)
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"name",
		"string",
		"Точное имя объекта метаданных (без учета регистра)",
		,
		Истина
	));
	
	// Создаем JSON-схему параметров
	СхемаПараметров = mcp_Метаданные.СхемаПараметровИнструмента(МассивПараметров);
	
	// Добавляем инструмент в таблицу
	mcp_Метаданные.ДобавитьИнструмент(
		Инструменты,
		"get_metadata_structure",
		"Получение структуры объекта метаданных (реквизиты, табличные части, измерения, ресурсы)",
		СхемаПараметров
	);

КонецПроцедуры

Функция СтруктураОбъектаМетаданных(Аргументы)

	МетаТип = Аргументы.metaType;
	ИмяОбъекта = Аргументы.name;
	
	// Получаем коллекцию нужного типа
	Попытка
		КоллекцияМД = Метаданные[МетаТип];
	Исключение
		ВызватьИсключение "Неизвестный тип метаданных в metaType: " + МетаТип;
	КонецПопытки;
	
	// Ищем объект метаданных по имени (без учета регистра)
	МетаданныеОбъекта = КоллекцияМД.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Объект метаданных не найден: " + МетаТип + "." + ИмяОбъекта;
	КонецЕсли;
	
	ОбработкаОбъект = Создать();
	
	Возврат ОбработкаОбъект.ОписаниеСтруктурыОбъектаМетаданных(МетаданныеОбъекта);
	
КонецФункции

#КонецОбласти

